

1) Create a virtual network and network security group

1.1) Assign the sandbox resource group to the variable rg:
rg=learn-2572c0fc-c937-4151-bba0-8d07ecc9c097

1.2) Create the ERP-servers virtual network and the Applications subnet:
az network vnet create --resource-group $rg --name ERP-servers --address-prefixes 10.0.0.0/16 --subnet-name Applications --subnet-prefixes 10.0.0.0/24

1.3) Create the Databases subnet:
az network vnet subnet create --resource-group $rg --vnet-name ERP-servers --address-prefixes 10.0.1.0/24 --name Databases

1.4) Create the ERP-SERVERS-NSG network security group:
az network nsg create --resource-group $rg --name ERP-SERVERS-NSG


2) Create VMs running Ubuntu

2.1) Build the AppServer VM. For the admin account, define a <password>:
wget -N https://raw.githubusercontent.com/MicrosoftDocs/mslearn-secure-and-isolate-with-nsg-and-service-endpoints/master/cloud-init.yml && az vm create --resource-group $rg --name AppServer --vnet-name ERP-servers --subnet Applications --nsg ERP-SERVERS-NSG --image UbuntuLTS --size Standard_DS1_v2 --admin-username azureuser --custom-data cloud-init.yml --no-wait --admin-password MyPassword123!

2.2) Build the DataServer VM. For the admin account, define a <password>:
az vm create --resource-group $rg --name DataServer --vnet-name ERP-servers --subnet Databases --nsg ERP-SERVERS-NSG --size Standard_DS1_v2 --image UbuntuLTS --admin-username azureuser --custom-data cloud-init.yml --admin-password MyPassword123!

2.3) Confirm that the VMs are running (it can take several minutes for the VMs to be in a running state):
az vm list --resource-group $rg --show-details --query "[*].{Name:name, Provisioned:provisioningState, Power:powerState}" --output table


3) Check default connectivity

3.1) Connect to your VMs using SSH directly from Cloud Shell. You need the public IP addresses that have been assigned to your VMs. List the IP addresses that you'll use to connect to the VMs:
az vm list --resource-group $rg --show-details --query "[*].{Name:name, PrivateIP:privateIps, PublicIP:publicIps}" --output table

3.2) Assign the public IP addresses to variables:
APPSERVERIP="$(az vm list-ip-addresses --resource-group $rg --name AppServer --query "[].virtualMachine.network.publicIpAddresses[*].ipAddress" --output tsv)"
DATASERVERIP="$(az vm list-ip-addresses --resource-group $rg --name DataServer --query "[].virtualMachine.network.publicIpAddresses[*].ipAddress" --output tsv)"

3.3) Check whether you can connect to your AppServer VM:
ssh azureuser@$APPSERVERIP -o ConnectTimeout=5

3.4) Check whether you can connect to your DataServer VM:
ssh azureuser@$DATASERVERIP -o ConnectTimeout=5


4) Create a security rule for SSH

4.1) Create a new inbound security rule to enable SSH access:
az network nsg rule create \
    --resource-group $rg \
    --nsg-name ERP-SERVERS-NSG \
    --name AllowSSHRule \
    --direction Inbound \
    --priority 100 \
    --source-address-prefixes '*' \
    --source-port-ranges '*' \
    --destination-address-prefixes '*' \
    --destination-port-ranges 22 \
    --access Allow \
    --protocol Tcp \
    --description "Allow inbound SSH"

4.2) Check whether you can now connect to your AppServer VM:
ssh azureuser@$APPSERVERIP -o ConnectTimeout=5

4.3) Check whether you can now connect to your DataServer VM:
ssh azureuser@$DATASERVERIP -o ConnectTimeout=5


5) Create a security rule to prevent web access

5.1) Create a new inbound security rule to deny HTTP access over port 80:
az network nsg rule create \
    --resource-group $rg \
    --nsg-name ERP-SERVERS-NSG \
    --name httpRule \
    --direction Inbound \
    --priority 150 \
    --source-address-prefixes 10.0.1.4 \
    --source-port-ranges '*' \
    --destination-address-prefixes 10.0.0.4 \
    --destination-port-ranges 80 \
    --access Deny \
    --protocol Tcp \
    --description "Deny from DataServer to AppServer on port 80"


6) Test HTTP connectivity between virtual machines

6.1) Connect to your AppServer VM. Check if AppServer can communicate with DataServer over HTTP:
ssh -t azureuser@$APPSERVERIP 'wget http://10.0.1.4; exit; bash'


7) Deploy an app security group

7.1) Create a new app security group called ERP-DB-SERVERS-ASG:
az network asg create \
    --resource-group $rg \
    --name ERP-DB-SERVERS-ASG

7.2) Associate DataServer with the app security group:
az network nic ip-config update \
    --resource-group $rg \
    --application-security-groups ERP-DB-SERVERS-ASG \
    --name ipconfigDataServer \
    --nic-name DataServerVMNic \
    --vnet-name ERP-servers \
    --subnet Databases

7.3) Update the HTTP rule in the ERP-SERVERS-NSG network security group. It should reference the ERP-DB-Servers app security group:
az network nsg rule update \
    --resource-group $rg \
    --nsg-name ERP-SERVERS-NSG \
    --name httpRule \
    --direction Inbound \
    --priority 150 \
    --source-address-prefixes "" \
    --source-port-ranges '*' \
    --source-asgs ERP-DB-SERVERS-ASG \
    --destination-address-prefixes 10.0.0.4 \
    --destination-port-ranges 80 \
    --access Deny \
    --protocol Tcp \
    --description "Deny from DataServer to AppServer on port 80 using application security group"


8) Test the updated HTTP security rule

8.1) Connect to your AppServer VM. Check if AppServer can communicate with DataServer over HTTP:
ssh -t azureuser@$APPSERVERIP 'wget http://10.0.1.4; exit; bash'

8.2) Connect to your DataServer. Check if DataServer can communicate with AppServer over HTTP:
ssh -t azureuser@$DATASERVERIP 'wget http://10.0.0.4; exit; bash'

